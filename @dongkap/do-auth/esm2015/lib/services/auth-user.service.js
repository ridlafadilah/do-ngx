import { Injectable, Inject } from '@angular/core';
import { Subject } from 'rxjs';
import { map } from 'rxjs/operators';
import { API, HTTP_SERVICE, oauthInfo } from '@dongkap/do-core';
import { UserInfo } from '@dongkap/do-core';
import { ProfileIndexedDBService } from '../storage/profile-indexeddb.service';
import { AuthIndexedDBService } from '../storage/auth-indexeddb.service';
export class AuthUserService extends UserInfo {
    constructor(profileIndexedDB, authIndexedDB, apiPath, httpBaseService) {
        super();
        this.profileIndexedDB = profileIndexedDB;
        this.authIndexedDB = authIndexedDB;
        this.apiPath = apiPath;
        this.httpBaseService = httpBaseService;
        this.loaderUserSubject$ = new Subject();
    }
    loadPhotoUser() {
        Promise.all([
            this.profileIndexedDB.get('image-b64'),
            this.profileIndexedDB.get('image'),
            this.profileIndexedDB.get('name'),
            this.authIndexedDB.getEnc('provider'),
        ]).then((value) => {
            if (!value[0]) {
                if (value[3] === 'local') {
                    if (value[1] && value[2]) {
                        this.getImage(value[1], value[2]);
                    }
                    else {
                        this.httpBaseService.HTTP_AUTH(this.apiPath['profile']['get-profile'])
                            .subscribe((response) => {
                            Promise.all([
                                this.profileIndexedDB.put('name', response['name']),
                                this.profileIndexedDB.put('email', response['email']),
                                this.profileIndexedDB.put('image', response['image']),
                            ]).then(() => {
                                this.getImage(response['image'], response['name']);
                            });
                        });
                    }
                }
                else {
                    const user = {
                        name: value[2],
                        picture: value[1],
                    };
                    this.loaderUserSubject$.next(user);
                }
            }
            else {
                Promise.all([
                    this.profileIndexedDB.get('name'),
                    this.profileIndexedDB.get('image-b64'),
                ]).then((profile) => {
                    const user = {
                        name: profile[0],
                        picture: profile[1],
                    };
                    this.loaderUserSubject$.next(user);
                });
            }
        });
    }
    updatePhotoUser(file, checksum) {
        if (file && checksum) {
            let picture;
            const imageBlob = new Blob([file], {
                type: 'image/png',
            });
            this.profileIndexedDB.put(oauthInfo.image, checksum).then();
            this.profileIndexedDB.put('image-blob', imageBlob).then();
            this.profileIndexedDB.get('name').then((name) => {
                const reader = new FileReader();
                reader.readAsDataURL(imageBlob);
                reader.onloadend = () => {
                    picture = reader.result.toString();
                    const user = {
                        'name': name,
                        'picture': picture,
                    };
                    this.profileIndexedDB.put('image-b64', picture).then();
                    this.loaderUserSubject$.next(user);
                };
            });
        }
        else {
            this.loaderUserSubject$.next(null);
        }
        return this.loaderUserSubject$.asObservable();
    }
    updateNameUser(name) {
        this.profileIndexedDB.put('name', name).then();
        Promise.all([
            this.profileIndexedDB.get('image-b64'),
            this.profileIndexedDB.get('image'),
        ]).then((value) => {
            let picture;
            if (value[0])
                picture = value[0];
            else
                picture = value[1];
            const user = {
                'name': name,
                'picture': picture,
            };
            this.loaderUserSubject$.next(user);
        });
        return this.loaderUserSubject$.asObservable();
    }
    getUser() {
        return this.loaderUserSubject$.asObservable();
    }
    getImage(checksum, name) {
        if (checksum != null) {
            this.httpBaseService.HTTP_AUTH(this.apiPath['file']['vw-photo-profile'], null, null, null, [checksum], 'arraybuffer')
                .pipe(map((response) => {
                let picture;
                const imageBlob = new Blob([response], {
                    type: 'image/png',
                });
                this.profileIndexedDB.put('image-blob', imageBlob).then();
                const reader = new FileReader();
                reader.readAsDataURL(imageBlob);
                reader.onloadend = () => {
                    picture = reader.result.toString();
                    const user = {
                        'name': name,
                        'picture': picture,
                    };
                    this.profileIndexedDB.put('image-b64', picture).then();
                    this.loaderUserSubject$.next(user);
                };
            })).subscribe();
        }
    }
}
AuthUserService.ctorParameters = () => [
    { type: ProfileIndexedDBService },
    { type: AuthIndexedDBService },
    { type: undefined, decorators: [{ type: Inject, args: [API,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [HTTP_SERVICE,] }] }
];
AuthUserService.decorators = [
    { type: Injectable }
];
AuthUserService.ctorParameters = () => [
    { type: ProfileIndexedDBService },
    { type: AuthIndexedDBService },
    { type: undefined, decorators: [{ type: Inject, args: [API,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [HTTP_SERVICE,] }] }
];
//# sourceMappingURL=data:application/json;base64,