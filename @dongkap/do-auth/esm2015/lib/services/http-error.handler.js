import { HttpErrorResponse } from '@angular/common/http';
import { BehaviorSubject, EMPTY, throwError } from 'rxjs';
import { filter, take, switchMap, catchError } from 'rxjs/operators';
export class HttpErrorHandler {
    constructor(translate, authToken, authStorage, authSignature) {
        this.translate = translate;
        this.authToken = authToken;
        this.authStorage = authStorage;
        this.authSignature = authSignature;
        this.isRefreshingToken = false;
        this.refreshTokenSubject = new BehaviorSubject(null);
    }
    errorHandler(error, req, next) {
        let err = new HttpErrorResponse({
            error: error.error,
            headers: error.headers,
            status: error.status,
            statusText: error.statusText,
            url: error.url,
        });
        if (error.error instanceof ArrayBuffer) {
            const decodedString = String.fromCharCode.apply(null, new Uint8Array(error.error));
            err = new HttpErrorResponse({
                error: JSON.parse(decodedString),
                headers: error.headers,
                status: error.status,
                statusText: error.statusText,
                url: error.url,
            });
        }
        switch (err.status) {
            case 200:
            case 201:
            case 304:
                return EMPTY;
            case 400:
                return this.error400(err);
            case 401:
                return this.error401(err, req, next);
            case 404:
            case 403:
            case 500:
            case 504:
            case 0:
                return throwError(this.errorDefault(err));
            default:
                break;
        }
        return throwError(err);
    }
    errorDefault(error) {
        let err = {
            respStatusCode: error.status,
            respStatusMessage: {},
        };
        err.respStatusMessage[err.respStatusCode] = error.statusText;
        let msgKey = 'error.' + err.respStatusCode;
        if (error.error) {
            if (error.error['respStatusCode']) {
                err = error.error;
                msgKey = err.respStatusMessage[err.respStatusCode];
            }
        }
        this.translate.get(msgKey).subscribe((result) => {
            err.respStatusMessage[err.respStatusCode] = result;
        });
        return err;
    }
    error400(error) {
        if (error.error['respStatusCode']) {
            if (error.error['respStatusCode'] === 'invalid_grant') {
                switch (error.error['respStatusMessage']['invalid_grant']) {
                    case 'Bad credentials':
                    case 'User account is locked':
                    case 'User is disabled':
                    case 'User account has expired':
                    case 'User credentials have expired':
                        return throwError(this.errorDefault(error));
                    default:
                        this.authToken.logout();
                        return throwError(this.errorDefault(error));
                }
            }
            else {
                return throwError(this.errorDefault(error));
            }
        }
        return throwError(error);
    }
    error401(error, request, next) {
        if (error.error) {
            if (error.error['respStatusCode'] === 'invalid_token') {
                if (!this.isRefreshingToken) {
                    this.isRefreshingToken = true;
                    this.refreshTokenSubject.next(null);
                    return this.authToken.refresh().pipe(switchMap((response) => {
                        this.isRefreshingToken = false;
                        this.refreshTokenSubject.next(response);
                        return this.authToken.oauthHeaders(request).pipe(switchMap((req) => {
                            request = req;
                            return this.authSignature.signHeaders(request).pipe(switchMap((valReq) => {
                                return next.handle(valReq);
                            }));
                        }));
                    }), catchError((err) => {
                        return this.errorHandler(err, request, next);
                    }));
                }
                else {
                    const msg = error.error['respStatusMessage']['invalid_token'];
                    if (msg.includes('expired')) {
                        this.authToken.logout();
                    }
                    else {
                        return this.refreshTokenSubject.pipe(filter(response => response != null), take(1), switchMap(() => {
                            return this.authToken.oauthHeaders(request).pipe(switchMap((req) => {
                                request = req;
                                return this.authSignature.signHeaders(request).pipe(switchMap((valReq) => {
                                    return next.handle(valReq);
                                }));
                            }));
                        }));
                    }
                }
            }
        }
        return throwError(error);
    }
}
//# sourceMappingURL=data:application/json;base64,