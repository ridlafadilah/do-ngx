import { __extends } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { Subject } from 'rxjs';
import { map } from 'rxjs/operators';
import { API, HTTP_SERVICE, oauthInfo } from '@dongkap/do-core';
import { UserInfo } from '@dongkap/do-core';
import { ProfileIndexedDBService } from '../storage/profile-indexeddb.service';
import { AuthIndexedDBService } from '../storage/auth-indexeddb.service';
var AuthUserService = /** @class */ (function (_super) {
    __extends(AuthUserService, _super);
    function AuthUserService(profileIndexedDB, authIndexedDB, apiPath, httpBaseService) {
        var _this = _super.call(this) || this;
        _this.profileIndexedDB = profileIndexedDB;
        _this.authIndexedDB = authIndexedDB;
        _this.apiPath = apiPath;
        _this.httpBaseService = httpBaseService;
        _this.loaderUserSubject$ = new Subject();
        return _this;
    }
    AuthUserService.prototype.loadPhotoUser = function () {
        var _this = this;
        Promise.all([
            this.profileIndexedDB.get('image-b64'),
            this.profileIndexedDB.get('image'),
            this.profileIndexedDB.get('name'),
            this.authIndexedDB.getEnc('provider'),
        ]).then(function (value) {
            if (!value[0]) {
                if (value[3] === 'local') {
                    if (value[1] && value[2]) {
                        _this.getImage(value[1], value[2]);
                    }
                    else {
                        _this.httpBaseService.HTTP_AUTH(_this.apiPath['profile']['get-profile'])
                            .subscribe(function (response) {
                            Promise.all([
                                _this.profileIndexedDB.put('name', response['name']),
                                _this.profileIndexedDB.put('email', response['email']),
                                _this.profileIndexedDB.put('image', response['image']),
                            ]).then(function () {
                                _this.getImage(response['image'], response['name']);
                            });
                        });
                    }
                }
                else {
                    var user = {
                        name: value[2],
                        picture: value[1],
                    };
                    _this.loaderUserSubject$.next(user);
                }
            }
            else {
                Promise.all([
                    _this.profileIndexedDB.get('name'),
                    _this.profileIndexedDB.get('image-b64'),
                ]).then(function (profile) {
                    var user = {
                        name: profile[0],
                        picture: profile[1],
                    };
                    _this.loaderUserSubject$.next(user);
                });
            }
        });
    };
    AuthUserService.prototype.updatePhotoUser = function (file, checksum) {
        var _this = this;
        if (file && checksum) {
            var picture_1;
            var imageBlob_1 = new Blob([file], {
                type: 'image/png',
            });
            this.profileIndexedDB.put(oauthInfo.image, checksum).then();
            this.profileIndexedDB.put('image-blob', imageBlob_1).then();
            this.profileIndexedDB.get('name').then(function (name) {
                var reader = new FileReader();
                reader.readAsDataURL(imageBlob_1);
                reader.onloadend = function () {
                    picture_1 = reader.result.toString();
                    var user = {
                        'name': name,
                        'picture': picture_1,
                    };
                    _this.profileIndexedDB.put('image-b64', picture_1).then();
                    _this.loaderUserSubject$.next(user);
                };
            });
        }
        else {
            this.loaderUserSubject$.next(null);
        }
        return this.loaderUserSubject$.asObservable();
    };
    AuthUserService.prototype.updateNameUser = function (name) {
        var _this = this;
        this.profileIndexedDB.put('name', name).then();
        Promise.all([
            this.profileIndexedDB.get('image-b64'),
            this.profileIndexedDB.get('image'),
        ]).then(function (value) {
            var picture;
            if (value[0])
                picture = value[0];
            else
                picture = value[1];
            var user = {
                'name': name,
                'picture': picture,
            };
            _this.loaderUserSubject$.next(user);
        });
        return this.loaderUserSubject$.asObservable();
    };
    AuthUserService.prototype.getUser = function () {
        return this.loaderUserSubject$.asObservable();
    };
    AuthUserService.prototype.getImage = function (checksum, name) {
        var _this = this;
        if (checksum != null) {
            this.httpBaseService.HTTP_AUTH(this.apiPath['file']['vw-photo-profile'], null, null, null, [checksum], 'arraybuffer')
                .pipe(map(function (response) {
                var picture;
                var imageBlob = new Blob([response], {
                    type: 'image/png',
                });
                _this.profileIndexedDB.put('image-blob', imageBlob).then();
                var reader = new FileReader();
                reader.readAsDataURL(imageBlob);
                reader.onloadend = function () {
                    picture = reader.result.toString();
                    var user = {
                        'name': name,
                        'picture': picture,
                    };
                    _this.profileIndexedDB.put('image-b64', picture).then();
                    _this.loaderUserSubject$.next(user);
                };
            })).subscribe();
        }
    };
    AuthUserService.ctorParameters = function () { return [
        { type: ProfileIndexedDBService },
        { type: AuthIndexedDBService },
        { type: undefined, decorators: [{ type: Inject, args: [API,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [HTTP_SERVICE,] }] }
    ]; };
    AuthUserService.decorators = [
        { type: Injectable }
    ];
    AuthUserService.ctorParameters = function () { return [
        { type: ProfileIndexedDBService },
        { type: AuthIndexedDBService },
        { type: undefined, decorators: [{ type: Inject, args: [API,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [HTTP_SERVICE,] }] }
    ]; };
    return AuthUserService;
}(UserInfo));
export { AuthUserService };
//# sourceMappingURL=data:application/json;base64,