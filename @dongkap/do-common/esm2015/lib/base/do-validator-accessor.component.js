import { Directive, Input } from '@angular/core';
import { NgControl, Validators, } from '@angular/forms';
export class DoValidatorAccessor {
    constructor(ngControl) {
        this.ngControl = ngControl;
        this.label = '';
        this.nolabel = false;
        this.disabled = false;
        this.required = false;
        this.onChange = (_) => { };
        this.onTouched = (_) => { };
        ngControl && (ngControl.valueAccessor = this);
    }
    onInit() { }
    ngOnInit() {
        this.onInit();
        const control = this.ngControl.control;
        const validators = control.validator ? [control.validator] : [];
        if (this.ngControl.control.errors) {
            this.required = this.ngControl.control.errors['required'];
        }
        if (this.required) {
            validators.push(Validators.required);
        }
        if (this.pattern) {
            validators.push(Validators.pattern(this.pattern));
        }
        control.setValidators(validators);
        control.updateValueAndValidity();
    }
    validate(c) {
        const validators = [];
        if (this.required) {
            validators.push(Validators.required);
        }
        if (this.pattern) {
            validators.push(Validators.pattern(this.pattern));
        }
        return validators;
    }
    get hasErrors() {
        return (!this.disabled &&
            this.ngControl.control &&
            this.ngControl.control.invalid &&
            this.ngControl.touched);
    }
    get hasSuccess() {
        return (!this.disabled &&
            this.ngControl.control &&
            this.ngControl.control.valid &&
            this.ngControl.touched);
    }
    get errorMessages() {
        const errors = [];
        if (this.ngControl.errors)
            Object.keys(this.ngControl.errors).forEach(property => {
                switch (property) {
                    case 'required':
                        errors.push('error.required');
                        break;
                    case 'email':
                        errors.push('error.pattern.email');
                        break;
                    case 'minlength':
                        errors.push('error.minlength');
                        break;
                    default:
                        errors.push('error.'.concat(property).concat('.').concat(this.name));
                        break;
                }
            });
        return errors;
    }
    registerOnValidatorChange(fn) {
        this.onChange = fn;
    }
}
DoValidatorAccessor.ctorParameters = () => [
    { type: NgControl }
];
DoValidatorAccessor.decorators = [
    { type: Directive }
];
DoValidatorAccessor.ctorParameters = () => [
    { type: NgControl }
];
DoValidatorAccessor.propDecorators = {
    name: [{ type: Input }],
    pattern: [{ type: Input }],
    label: [{ type: Input }],
    nolabel: [{ type: Input }],
    disabled: [{ type: Input }],
    required: [{ type: Input }],
    paramError: [{ type: Input }],
    warnMessage: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,