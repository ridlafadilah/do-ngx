export const oauthInfo = {
    access_token: 'access_token',
    refresh_token: 'refresh_token',
    token_type: 'token_type',
    public_key: 'xrkey',
    expires_in: 'expires_in',
    authority: 'authority',
    provider: 'provider',
    image: 'image',
    email: 'email',
    menus: 'menus',
    extras: 'extras',
    server_date: 'server_date',
    locale: 'locale',
    theme: 'theme',
    name: 'name',
};
export var TypeDataOauth;
(function (TypeDataOauth) {
    TypeDataOauth["OAUTH"] = "oauth";
    TypeDataOauth["PROFILE"] = "profile";
    TypeDataOauth["SETTINGS"] = "settings";
    TypeDataOauth["LOCALSTORAGE"] = "localstorage";
})(TypeDataOauth || (TypeDataOauth = {}));
export const oauthInfoModels = [
    { key: oauthInfo.access_token, enc: true, type: TypeDataOauth.OAUTH, string: true },
    { key: oauthInfo.refresh_token, enc: true, type: TypeDataOauth.OAUTH, string: true },
    { key: oauthInfo.token_type, enc: true, type: TypeDataOauth.OAUTH, string: true },
    { key: oauthInfo.public_key, enc: true, type: TypeDataOauth.OAUTH, string: true },
    { key: oauthInfo.expires_in, enc: true, type: TypeDataOauth.OAUTH, string: false },
    { key: oauthInfo.authority, enc: true, type: TypeDataOauth.OAUTH, string: true },
    { key: oauthInfo.provider, enc: true, type: TypeDataOauth.OAUTH, string: true },
    { key: oauthInfo.menus, enc: true, type: TypeDataOauth.OAUTH, string: false },
    { key: oauthInfo.extras, enc: true, type: TypeDataOauth.OAUTH, string: false },
    { key: oauthInfo.name, enc: false, type: TypeDataOauth.PROFILE, string: true },
    { key: oauthInfo.email, enc: false, type: TypeDataOauth.PROFILE, string: true },
    { key: oauthInfo.image, enc: false, type: TypeDataOauth.PROFILE, string: true },
    { key: oauthInfo.locale, enc: false, type: TypeDataOauth.SETTINGS, string: true },
    { key: oauthInfo.theme, enc: false, type: TypeDataOauth.SETTINGS, string: true },
    { key: oauthInfo.server_date, enc: false, type: TypeDataOauth.SETTINGS, string: true },
];
export const signatureHeader = {
    authorization: 'Authorization',
    signature: 'X-DONGKAP-Signature',
    timestamp: 'X-DONGKAP-Timestamp',
    key: 'X-DONGKAP-Key',
    mark: 'X-DONGKAP-Mark',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2Utc2VydmVyLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRvbmdrYXAvZG8tY29yZS8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbHMvc2VjdXJpdHkvcmVzb3VyY2Utc2VydmVyLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWFBLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRztJQUNyQixZQUFZLEVBQUUsY0FBYztJQUM1QixhQUFhLEVBQUUsZUFBZTtJQUM5QixVQUFVLEVBQUUsWUFBWTtJQUN4QixVQUFVLEVBQUUsT0FBTztJQUNuQixVQUFVLEVBQUUsWUFBWTtJQUN4QixTQUFTLEVBQUUsV0FBVztJQUN0QixRQUFRLEVBQUUsVUFBVTtJQUNwQixLQUFLLEVBQUUsT0FBTztJQUNkLEtBQUssRUFBRSxPQUFPO0lBQ2QsS0FBSyxFQUFFLE9BQU87SUFDZCxNQUFNLEVBQUUsUUFBUTtJQUNoQixXQUFXLEVBQUUsYUFBYTtJQUMxQixNQUFNLEVBQUUsUUFBUTtJQUNoQixLQUFLLEVBQUUsT0FBTztJQUNkLElBQUksRUFBRSxNQUFNO0NBQ2YsQ0FBQztBQUVGLE1BQU0sQ0FBTixJQUFZLGFBS1g7QUFMRCxXQUFZLGFBQWE7SUFDckIsZ0NBQWUsQ0FBQTtJQUNmLG9DQUFtQixDQUFBO0lBQ25CLHNDQUFxQixDQUFBO0lBQ3JCLDhDQUE2QixDQUFBO0FBQ2pDLENBQUMsRUFMVyxhQUFhLEtBQWIsYUFBYSxRQUt4QjtBQUVELE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBcUI7SUFDN0MsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7SUFDbkYsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7SUFDcEYsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7SUFDakYsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7SUFDakYsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7SUFDbEYsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7SUFDaEYsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7SUFDL0UsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7SUFDN0UsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7SUFDOUUsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7SUFDOUUsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7SUFDL0UsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7SUFDL0UsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7SUFDakYsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7SUFDaEYsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Q0FDekYsQ0FBQztBQVNGLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRztJQUMzQixhQUFhLEVBQUUsZUFBZTtJQUM5QixTQUFTLEVBQUUscUJBQXFCO0lBQ2hDLFNBQVMsRUFBRSxxQkFBcUI7SUFDaEMsR0FBRyxFQUFFLGVBQWU7SUFDcEIsSUFBSSxFQUFFLGdCQUFnQjtDQUN6QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBTZWN1cml0eVJlc291cmNlTW9kZWwge1xuICAgIGNsaWVudF9pZDogc3RyaW5nO1xuICAgIGNsaWVudF9zZWNyZXQ6IHN0cmluZztcbiAgICBncmFudF90eXBlOiBzdHJpbmc7XG4gICAgcHJpdmF0ZV9rZXk/OiBzdHJpbmc7XG4gICAgYWVzX2tleT86IHN0cmluZztcbiAgICBzZXNzaW9uX2lkbGU/OiBudW1iZXI7XG4gICAgc2Vzc2lvbl90aW1lb3V0PzogbnVtYmVyO1xuICAgIHNpZ25hdHVyZT86IGJvb2xlYW47XG4gICAgdmFwaWQ/OiBzdHJpbmc7XG4gICAgcmVjYXB0Y2hhPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3Qgb2F1dGhJbmZvID0ge1xuICAgIGFjY2Vzc190b2tlbjogJ2FjY2Vzc190b2tlbicsXG4gICAgcmVmcmVzaF90b2tlbjogJ3JlZnJlc2hfdG9rZW4nLFxuICAgIHRva2VuX3R5cGU6ICd0b2tlbl90eXBlJyxcbiAgICBwdWJsaWNfa2V5OiAneHJrZXknLFxuICAgIGV4cGlyZXNfaW46ICdleHBpcmVzX2luJyxcbiAgICBhdXRob3JpdHk6ICdhdXRob3JpdHknLFxuICAgIHByb3ZpZGVyOiAncHJvdmlkZXInLFxuICAgIGltYWdlOiAnaW1hZ2UnLFxuICAgIGVtYWlsOiAnZW1haWwnLFxuICAgIG1lbnVzOiAnbWVudXMnLFxuICAgIGV4dHJhczogJ2V4dHJhcycsXG4gICAgc2VydmVyX2RhdGU6ICdzZXJ2ZXJfZGF0ZScsXG4gICAgbG9jYWxlOiAnbG9jYWxlJyxcbiAgICB0aGVtZTogJ3RoZW1lJyxcbiAgICBuYW1lOiAnbmFtZScsXG59O1xuXG5leHBvcnQgZW51bSBUeXBlRGF0YU9hdXRoIHtcbiAgICBPQVVUSCA9ICdvYXV0aCcsXG4gICAgUFJPRklMRSA9ICdwcm9maWxlJyxcbiAgICBTRVRUSU5HUyA9ICdzZXR0aW5ncycsXG4gICAgTE9DQUxTVE9SQUdFID0gJ2xvY2Fsc3RvcmFnZScsXG59XG5cbmV4cG9ydCBjb25zdCBvYXV0aEluZm9Nb2RlbHM6IE9hdXRoSW5mb01vZGVsW10gPSBbXG4gICAgeyBrZXk6IG9hdXRoSW5mby5hY2Nlc3NfdG9rZW4sIGVuYzogdHJ1ZSwgdHlwZTogVHlwZURhdGFPYXV0aC5PQVVUSCwgc3RyaW5nOiB0cnVlIH0sXG4gICAgeyBrZXk6IG9hdXRoSW5mby5yZWZyZXNoX3Rva2VuLCBlbmM6IHRydWUsIHR5cGU6IFR5cGVEYXRhT2F1dGguT0FVVEgsIHN0cmluZzogdHJ1ZSB9LFxuICAgIHsga2V5OiBvYXV0aEluZm8udG9rZW5fdHlwZSwgZW5jOiB0cnVlLCB0eXBlOiBUeXBlRGF0YU9hdXRoLk9BVVRILCBzdHJpbmc6IHRydWUgfSxcbiAgICB7IGtleTogb2F1dGhJbmZvLnB1YmxpY19rZXksIGVuYzogdHJ1ZSwgdHlwZTogVHlwZURhdGFPYXV0aC5PQVVUSCwgc3RyaW5nOiB0cnVlIH0sXG4gICAgeyBrZXk6IG9hdXRoSW5mby5leHBpcmVzX2luLCBlbmM6IHRydWUsIHR5cGU6IFR5cGVEYXRhT2F1dGguT0FVVEgsIHN0cmluZzogZmFsc2UgfSxcbiAgICB7IGtleTogb2F1dGhJbmZvLmF1dGhvcml0eSwgZW5jOiB0cnVlLCB0eXBlOiBUeXBlRGF0YU9hdXRoLk9BVVRILCBzdHJpbmc6IHRydWUgfSxcbiAgICB7IGtleTogb2F1dGhJbmZvLnByb3ZpZGVyLCBlbmM6IHRydWUsIHR5cGU6IFR5cGVEYXRhT2F1dGguT0FVVEgsIHN0cmluZzogdHJ1ZSB9LFxuICAgIHsga2V5OiBvYXV0aEluZm8ubWVudXMsIGVuYzogdHJ1ZSwgdHlwZTogVHlwZURhdGFPYXV0aC5PQVVUSCwgc3RyaW5nOiBmYWxzZSB9LFxuICAgIHsga2V5OiBvYXV0aEluZm8uZXh0cmFzLCBlbmM6IHRydWUsIHR5cGU6IFR5cGVEYXRhT2F1dGguT0FVVEgsIHN0cmluZzogZmFsc2UgfSxcbiAgICB7IGtleTogb2F1dGhJbmZvLm5hbWUsIGVuYzogZmFsc2UsIHR5cGU6IFR5cGVEYXRhT2F1dGguUFJPRklMRSwgc3RyaW5nOiB0cnVlIH0sXG4gICAgeyBrZXk6IG9hdXRoSW5mby5lbWFpbCwgZW5jOiBmYWxzZSwgdHlwZTogVHlwZURhdGFPYXV0aC5QUk9GSUxFLCBzdHJpbmc6IHRydWUgfSxcbiAgICB7IGtleTogb2F1dGhJbmZvLmltYWdlLCBlbmM6IGZhbHNlLCB0eXBlOiBUeXBlRGF0YU9hdXRoLlBST0ZJTEUsIHN0cmluZzogdHJ1ZSB9LFxuICAgIHsga2V5OiBvYXV0aEluZm8ubG9jYWxlLCBlbmM6IGZhbHNlLCB0eXBlOiBUeXBlRGF0YU9hdXRoLlNFVFRJTkdTLCBzdHJpbmc6IHRydWUgfSxcbiAgICB7IGtleTogb2F1dGhJbmZvLnRoZW1lLCBlbmM6IGZhbHNlLCB0eXBlOiBUeXBlRGF0YU9hdXRoLlNFVFRJTkdTLCBzdHJpbmc6IHRydWUgfSxcbiAgICB7IGtleTogb2F1dGhJbmZvLnNlcnZlcl9kYXRlLCBlbmM6IGZhbHNlLCB0eXBlOiBUeXBlRGF0YU9hdXRoLlNFVFRJTkdTLCBzdHJpbmc6IHRydWUgfSxcbl07XG5cbmV4cG9ydCBpbnRlcmZhY2UgT2F1dGhJbmZvTW9kZWwge1xuICAgIGtleTogc3RyaW5nO1xuICAgIGVuYzogYm9vbGVhbjtcbiAgICB0eXBlOiBUeXBlRGF0YU9hdXRoO1xuICAgIHN0cmluZzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IHNpZ25hdHVyZUhlYWRlciA9IHtcbiAgICBhdXRob3JpemF0aW9uOiAnQXV0aG9yaXphdGlvbicsXG4gICAgc2lnbmF0dXJlOiAnWC1ET05HS0FQLVNpZ25hdHVyZScsXG4gICAgdGltZXN0YW1wOiAnWC1ET05HS0FQLVRpbWVzdGFtcCcsXG4gICAga2V5OiAnWC1ET05HS0FQLUtleScsXG4gICAgbWFyazogJ1gtRE9OR0tBUC1NYXJrJyxcbn07XG4iXX0=