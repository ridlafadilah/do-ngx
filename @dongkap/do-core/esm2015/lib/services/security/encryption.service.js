import { Injectable } from '@angular/core';
import * as CryptoJS from 'crypto-js';
export class EncryptionService {
    constructor() {
        this.ivSize = 128;
    }
    getHmacSha256(secret, message, hex) {
        const hash = CryptoJS.HmacSHA256(message, secret);
        if (hex)
            return CryptoJS.enc.Hex.stringify(hash).toUpperCase();
        return CryptoJS.enc.Base64.stringify(hash);
    }
    encryptAES(secretKey, message) {
        const iv = CryptoJS.lib.WordArray.random(this.ivSize / 8);
        const key = CryptoJS.enc.Utf8.parse(secretKey);
        const encrypted = CryptoJS.AES.encrypt(message, key, {
            iv: iv,
            padding: CryptoJS.pad.Pkcs7,
            mode: CryptoJS.mode.CBC,
        });
        const encryptMessage = iv.toString() + encrypted.toString();
        return encryptMessage;
    }
    decryptAES(secretKey, encryptMessage) {
        if (encryptMessage) {
            const iv = CryptoJS.enc.Hex.parse(encryptMessage.substr(0, 32));
            const key = CryptoJS.enc.Utf8.parse(secretKey);
            const encrypted = encryptMessage.substring(32);
            const decrypted = CryptoJS.AES.decrypt(encrypted, key, {
                iv: iv,
                padding: CryptoJS.pad.Pkcs7,
                mode: CryptoJS.mode.CBC,
            });
            try {
                return decrypted.toString(CryptoJS.enc.Utf8);
            }
            catch (error) {
                return null;
            }
        }
        return null;
    }
}
EncryptionService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jcnlwdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRvbmdrYXAvZG8tY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9zZWN1cml0eS9lbmNyeXB0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEtBQUssUUFBUSxNQUFNLFdBQVcsQ0FBQztBQUd0QyxNQUFNLE9BQU8saUJBQWlCO0lBRDlCO1FBR1ksV0FBTSxHQUFXLEdBQUcsQ0FBQztJQXdDakMsQ0FBQztJQXRDVSxhQUFhLENBQUMsTUFBYyxFQUFFLE9BQWUsRUFBRSxHQUFhO1FBQy9ELE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2xELElBQUksR0FBRztZQUNILE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzFELE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFTSxVQUFVLENBQUMsU0FBaUIsRUFBRSxPQUFlO1FBQ2hELE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzFELE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMvQyxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1lBQ2pELEVBQUUsRUFBRSxFQUFFO1lBQ04sT0FBTyxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSztZQUMzQixJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHO1NBQzFCLENBQUMsQ0FBQztRQUNILE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsR0FBRyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDNUQsT0FBTyxjQUFjLENBQUM7SUFDMUIsQ0FBQztJQUVNLFVBQVUsQ0FBQyxTQUFpQixFQUFFLGNBQXNCO1FBQ3ZELElBQUksY0FBYyxFQUFFO1lBQ2hCLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2hFLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUMvQyxNQUFNLFNBQVMsR0FBRyxjQUFjLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQy9DLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUU7Z0JBQ3JELEVBQUUsRUFBRSxFQUFFO2dCQUNOLE9BQU8sRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUs7Z0JBQzNCLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUc7YUFDeEIsQ0FBQyxDQUFDO1lBQ0gsSUFBSTtnQkFDQSxPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNoRDtZQUFDLE9BQU8sS0FBSyxFQUFFO2dCQUNaLE9BQU8sSUFBSSxDQUFDO2FBQ2Y7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7OztZQXpDSixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgQ3J5cHRvSlMgZnJvbSAnY3J5cHRvLWpzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEVuY3J5cHRpb25TZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgaXZTaXplOiBudW1iZXIgPSAxMjg7XG5cbiAgICBwdWJsaWMgZ2V0SG1hY1NoYTI1NihzZWNyZXQ6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nLCBoZXg/OiBib29sZWFuKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgaGFzaCA9IENyeXB0b0pTLkhtYWNTSEEyNTYobWVzc2FnZSwgc2VjcmV0KTtcbiAgICAgICAgaWYgKGhleClcbiAgICAgICAgICAgIHJldHVybiBDcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeShoYXNoKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICByZXR1cm4gQ3J5cHRvSlMuZW5jLkJhc2U2NC5zdHJpbmdpZnkoaGFzaCk7XG4gICAgfVxuXG4gICAgcHVibGljIGVuY3J5cHRBRVMoc2VjcmV0S2V5OiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGl2ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20odGhpcy5pdlNpemUgLyA4KTtcbiAgICAgICAgY29uc3Qga2V5ID0gQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2Uoc2VjcmV0S2V5KTtcbiAgICAgICAgY29uc3QgZW5jcnlwdGVkID0gQ3J5cHRvSlMuQUVTLmVuY3J5cHQobWVzc2FnZSwga2V5LCB7XG4gICAgICAgICAgICBpdjogaXYsXG4gICAgICAgICAgICBwYWRkaW5nOiBDcnlwdG9KUy5wYWQuUGtjczcsXG4gICAgICAgICAgICBtb2RlOiBDcnlwdG9KUy5tb2RlLkNCQyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGVuY3J5cHRNZXNzYWdlID0gaXYudG9TdHJpbmcoKSArIGVuY3J5cHRlZC50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gZW5jcnlwdE1lc3NhZ2U7XG4gICAgfVxuXG4gICAgcHVibGljIGRlY3J5cHRBRVMoc2VjcmV0S2V5OiBzdHJpbmcsIGVuY3J5cHRNZXNzYWdlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBpZiAoZW5jcnlwdE1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGNvbnN0IGl2ID0gQ3J5cHRvSlMuZW5jLkhleC5wYXJzZShlbmNyeXB0TWVzc2FnZS5zdWJzdHIoMCwgMzIpKTtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKHNlY3JldEtleSk7XG4gICAgICAgICAgICBjb25zdCBlbmNyeXB0ZWQgPSBlbmNyeXB0TWVzc2FnZS5zdWJzdHJpbmcoMzIpO1xuICAgICAgICAgICAgY29uc3QgZGVjcnlwdGVkID0gQ3J5cHRvSlMuQUVTLmRlY3J5cHQoZW5jcnlwdGVkLCBrZXksIHtcbiAgICAgICAgICAgICAgaXY6IGl2LFxuICAgICAgICAgICAgICBwYWRkaW5nOiBDcnlwdG9KUy5wYWQuUGtjczcsXG4gICAgICAgICAgICAgIG1vZGU6IENyeXB0b0pTLm1vZGUuQ0JDLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWNyeXB0ZWQudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLlV0ZjgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbn1cbiJdfQ==