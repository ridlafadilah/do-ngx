import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { HttpHeaders } from '@angular/common/http';
import { HttpAbstractService } from './http-abstract.service';
import { signatureHeader, HttpMethod } from '../../models';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class HttpCommonService extends HttpAbstractService {
    constructor(http) {
        super();
        this.http = http;
    }
    HTTP_AUTH(api, body, headers, params, pathVariable, responseType) {
        if (headers) {
            headers = headers.append(signatureHeader.mark, 'true');
        }
        else
            headers = new HttpHeaders().append(signatureHeader.mark, 'true');
        responseType = responseType ? responseType : 'json';
        return this.HTTP_BASE(api, body, headers, params, pathVariable, responseType);
    }
    HTTP_BASE(api, body, headers, params, pathVariable, responseType) {
        let response = null;
        responseType = responseType ? responseType : 'json';
        switch (api.method) {
            case HttpMethod.POST:
                response = this.POST(this.API(api, pathVariable), body, headers, params, responseType);
                break;
            case HttpMethod.PUT:
                response = this.PUT(this.API(api, pathVariable), body, headers, params);
                break;
            case HttpMethod.DELETE:
                response = this.DELETE(this.API(api, pathVariable), headers, params);
                break;
            default:
                response = this.GET(this.API(api, pathVariable), headers, params, responseType);
                break;
        }
        return response;
    }
    GET(url, headers, params, responseType) {
        return this.http.get(url, { headers: headers, params: params, responseType: responseType });
    }
    POST(url, body, headers, params, responseType) {
        return this.http.post(url, body, { headers: headers, params: params, responseType: responseType });
    }
    PUT(url, body, headers, params) {
        return this.http.put(url, body, { headers: headers, params: params });
    }
    DELETE(url, headers, params) {
        return this.http.delete(url, { headers: headers, params: params });
    }
}
HttpCommonService.ctorParameters = () => [
    { type: HttpClient }
];
HttpCommonService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HttpCommonService_Factory() { return new HttpCommonService(i0.ɵɵinject(i1.HttpClient)); }, token: HttpCommonService, providedIn: "root" });
HttpCommonService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
HttpCommonService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1jb21tb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bkb25na2FwL2RvLWNvcmUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvdXRpbHMvaHR0cC1jb21tb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHbkQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFpQixlQUFlLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDOzs7QUFLMUUsTUFBTSxPQUFPLGlCQUFrQixTQUFRLG1CQUFtQjtJQUV4RCxZQUFzQixJQUFnQjtRQUNwQyxLQUFLLEVBQUUsQ0FBQztRQURZLFNBQUksR0FBSixJQUFJLENBQVk7SUFFdEMsQ0FBQztJQUVNLFNBQVMsQ0FBQyxHQUFrQixFQUNqQixJQUFVLEVBQ1YsT0FBcUIsRUFDckIsTUFBbUIsRUFDbkIsWUFBdUIsRUFDdkIsWUFBcUM7UUFDckQsSUFBSSxPQUFPLEVBQUU7WUFDWCxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ3hEOztZQUFNLE9BQU8sR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3hFLFlBQVksR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ3BELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFTSxTQUFTLENBQUMsR0FBa0IsRUFDakIsSUFBVSxFQUNWLE9BQXFCLEVBQ3JCLE1BQW1CLEVBQ25CLFlBQXVCLEVBQ3ZCLFlBQXFDO1FBQ3JELElBQUksUUFBUSxHQUFvQixJQUFJLENBQUM7UUFDckMsWUFBWSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDcEQsUUFBUSxHQUFHLENBQUMsTUFBTSxFQUFFO1lBQ2xCLEtBQUssVUFBVSxDQUFDLElBQUk7Z0JBQ2xCLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFDO2dCQUN2RixNQUFNO1lBQ1IsS0FBSyxVQUFVLENBQUMsR0FBRztnQkFDakIsUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDeEUsTUFBTTtZQUNSLEtBQUssVUFBVSxDQUFDLE1BQU07Z0JBQ3BCLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDckUsTUFBTTtZQUNSO2dCQUNFLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7Z0JBQ2hGLE1BQU07U0FDVDtRQUNELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFTSxHQUFHLENBQUMsR0FBVyxFQUFFLE9BQXFCLEVBQUUsTUFBbUIsRUFBRSxZQUFrQjtRQUNwRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFDLENBQUMsQ0FBQztJQUM1RixDQUFDO0lBRU0sSUFBSSxDQUFDLEdBQVcsRUFBRSxJQUFTLEVBQUUsT0FBcUIsRUFBRSxNQUFtQixFQUFFLFlBQWtCO1FBRWhHLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFDLENBQUMsQ0FBQztJQUNuRyxDQUFDO0lBRU0sR0FBRyxDQUFDLEdBQVcsRUFBRSxJQUFTLEVBQUUsT0FBcUIsRUFBRSxNQUFtQjtRQUMzRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFTSxNQUFNLENBQUMsR0FBVyxFQUFFLE9BQXFCLEVBQUUsTUFBbUI7UUFDbkUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsRUFBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUFDO0lBQ25FLENBQUM7OztZQXpEMkIsVUFBVTs7OztZQUx2QyxVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQVRRLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSHR0cEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBIdHRwUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSHR0cEFic3RyYWN0U2VydmljZSB9IGZyb20gJy4vaHR0cC1hYnN0cmFjdC5zZXJ2aWNlJztcbmltcG9ydCB7IEh0dHBCYXNlTW9kZWwsIHNpZ25hdHVyZUhlYWRlciwgSHR0cE1ldGhvZCB9IGZyb20gJy4uLy4uL21vZGVscyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBIdHRwQ29tbW9uU2VydmljZSBleHRlbmRzIEh0dHBBYnN0cmFjdFNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBodHRwOiBIdHRwQ2xpZW50KSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBIVFRQX0FVVEgoYXBpOiBIdHRwQmFzZU1vZGVsLFxuICAgICAgICAgICAgICAgICAgICBib2R5PzogYW55LFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzPzogSHR0cEhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcz86IEh0dHBQYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgIHBhdGhWYXJpYWJsZT86IHN0cmluZ1tdLFxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU/OiAnanNvbicgfCAnYXJyYXlidWZmZXInKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBpZiAoaGVhZGVycykge1xuICAgICAgaGVhZGVycyA9IGhlYWRlcnMuYXBwZW5kKHNpZ25hdHVyZUhlYWRlci5tYXJrLCAndHJ1ZScpO1xuICAgIH0gZWxzZSBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCkuYXBwZW5kKHNpZ25hdHVyZUhlYWRlci5tYXJrLCAndHJ1ZScpO1xuICAgIHJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZSA/IHJlc3BvbnNlVHlwZSA6ICdqc29uJztcbiAgICByZXR1cm4gdGhpcy5IVFRQX0JBU0UoYXBpLCBib2R5LCBoZWFkZXJzLCBwYXJhbXMsIHBhdGhWYXJpYWJsZSwgcmVzcG9uc2VUeXBlKTtcbiAgfVxuXG4gIHB1YmxpYyBIVFRQX0JBU0UoYXBpOiBIdHRwQmFzZU1vZGVsLFxuICAgICAgICAgICAgICAgICAgICBib2R5PzogYW55LFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzPzogSHR0cEhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcz86IEh0dHBQYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgIHBhdGhWYXJpYWJsZT86IHN0cmluZ1tdLFxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU/OiAnanNvbicgfCAnYXJyYXlidWZmZXInKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBsZXQgcmVzcG9uc2U6IE9ic2VydmFibGU8YW55PiA9IG51bGw7XG4gICAgcmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlID8gcmVzcG9uc2VUeXBlIDogJ2pzb24nO1xuICAgIHN3aXRjaCAoYXBpLm1ldGhvZCkge1xuICAgICAgY2FzZSBIdHRwTWV0aG9kLlBPU1Q6XG4gICAgICAgIHJlc3BvbnNlID0gdGhpcy5QT1NUKHRoaXMuQVBJKGFwaSwgcGF0aFZhcmlhYmxlKSwgYm9keSwgaGVhZGVycywgcGFyYW1zLCByZXNwb25zZVR5cGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgSHR0cE1ldGhvZC5QVVQ6XG4gICAgICAgIHJlc3BvbnNlID0gdGhpcy5QVVQodGhpcy5BUEkoYXBpLCBwYXRoVmFyaWFibGUpLCBib2R5LCBoZWFkZXJzLCBwYXJhbXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgSHR0cE1ldGhvZC5ERUxFVEU6XG4gICAgICAgIHJlc3BvbnNlID0gdGhpcy5ERUxFVEUodGhpcy5BUEkoYXBpLCBwYXRoVmFyaWFibGUpLCBoZWFkZXJzLCBwYXJhbXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJlc3BvbnNlID0gdGhpcy5HRVQodGhpcy5BUEkoYXBpLCBwYXRoVmFyaWFibGUpLCBoZWFkZXJzLCBwYXJhbXMsIHJlc3BvbnNlVHlwZSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cblxuICBwdWJsaWMgR0VUKHVybDogc3RyaW5nLCBoZWFkZXJzPzogSHR0cEhlYWRlcnMsIHBhcmFtcz86IEh0dHBQYXJhbXMsIHJlc3BvbnNlVHlwZT86IGFueSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsLCB7aGVhZGVyczogaGVhZGVycywgcGFyYW1zOiBwYXJhbXMsIHJlc3BvbnNlVHlwZTogcmVzcG9uc2VUeXBlfSk7XG4gIH1cblxuICBwdWJsaWMgUE9TVCh1cmw6IHN0cmluZywgYm9keTogYW55LCBoZWFkZXJzPzogSHR0cEhlYWRlcnMsIHBhcmFtcz86IEh0dHBQYXJhbXMsIHJlc3BvbnNlVHlwZT86IGFueSk6XG4gICAgT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodXJsLCBib2R5LCB7aGVhZGVyczogaGVhZGVycywgcGFyYW1zOiBwYXJhbXMsIHJlc3BvbnNlVHlwZTogcmVzcG9uc2VUeXBlfSk7XG4gIH1cblxuICBwdWJsaWMgUFVUKHVybDogc3RyaW5nLCBib2R5OiBhbnksIGhlYWRlcnM/OiBIdHRwSGVhZGVycywgcGFyYW1zPzogSHR0cFBhcmFtcyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wdXQodXJsLCBib2R5LCB7aGVhZGVyczogaGVhZGVycywgcGFyYW1zOiBwYXJhbXN9KTtcbiAgfVxuXG4gIHB1YmxpYyBERUxFVEUodXJsOiBzdHJpbmcsIGhlYWRlcnM/OiBIdHRwSGVhZGVycywgcGFyYW1zPzogSHR0cFBhcmFtcyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGUodXJsLCB7aGVhZGVyczogaGVhZGVycywgcGFyYW1zOiBwYXJhbXN9KTtcbiAgfVxuXG59XG4iXX0=