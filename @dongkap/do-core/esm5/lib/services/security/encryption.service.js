import { Injectable } from '@angular/core';
import * as CryptoJS from 'crypto-js';
var EncryptionService = /** @class */ (function () {
    function EncryptionService() {
        this.ivSize = 128;
    }
    EncryptionService.prototype.getHmacSha256 = function (secret, message, hex) {
        var hash = CryptoJS.HmacSHA256(message, secret);
        if (hex)
            return CryptoJS.enc.Hex.stringify(hash).toUpperCase();
        return CryptoJS.enc.Base64.stringify(hash);
    };
    EncryptionService.prototype.encryptAES = function (secretKey, message) {
        var iv = CryptoJS.lib.WordArray.random(this.ivSize / 8);
        var key = CryptoJS.enc.Utf8.parse(secretKey);
        var encrypted = CryptoJS.AES.encrypt(message, key, {
            iv: iv,
            padding: CryptoJS.pad.Pkcs7,
            mode: CryptoJS.mode.CBC,
        });
        var encryptMessage = iv.toString() + encrypted.toString();
        return encryptMessage;
    };
    EncryptionService.prototype.decryptAES = function (secretKey, encryptMessage) {
        if (encryptMessage) {
            var iv = CryptoJS.enc.Hex.parse(encryptMessage.substr(0, 32));
            var key = CryptoJS.enc.Utf8.parse(secretKey);
            var encrypted = encryptMessage.substring(32);
            var decrypted = CryptoJS.AES.decrypt(encrypted, key, {
                iv: iv,
                padding: CryptoJS.pad.Pkcs7,
                mode: CryptoJS.mode.CBC,
            });
            try {
                return decrypted.toString(CryptoJS.enc.Utf8);
            }
            catch (error) {
                return null;
            }
        }
        return null;
    };
    EncryptionService.decorators = [
        { type: Injectable }
    ];
    return EncryptionService;
}());
export { EncryptionService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jcnlwdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGRvbmdrYXAvZG8tY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9zZWN1cml0eS9lbmNyeXB0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEtBQUssUUFBUSxNQUFNLFdBQVcsQ0FBQztBQUV0QztJQUFBO1FBR1ksV0FBTSxHQUFXLEdBQUcsQ0FBQztJQXdDakMsQ0FBQztJQXRDVSx5Q0FBYSxHQUFwQixVQUFxQixNQUFjLEVBQUUsT0FBZSxFQUFFLEdBQWE7UUFDL0QsSUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbEQsSUFBSSxHQUFHO1lBQ0gsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDMUQsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVNLHNDQUFVLEdBQWpCLFVBQWtCLFNBQWlCLEVBQUUsT0FBZTtRQUNoRCxJQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxRCxJQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDL0MsSUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUNqRCxFQUFFLEVBQUUsRUFBRTtZQUNOLE9BQU8sRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUs7WUFDM0IsSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRztTQUMxQixDQUFDLENBQUM7UUFDSCxJQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLEdBQUcsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzVELE9BQU8sY0FBYyxDQUFDO0lBQzFCLENBQUM7SUFFTSxzQ0FBVSxHQUFqQixVQUFrQixTQUFpQixFQUFFLGNBQXNCO1FBQ3ZELElBQUksY0FBYyxFQUFFO1lBQ2hCLElBQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2hFLElBQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUMvQyxJQUFNLFNBQVMsR0FBRyxjQUFjLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQy9DLElBQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUU7Z0JBQ3JELEVBQUUsRUFBRSxFQUFFO2dCQUNOLE9BQU8sRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUs7Z0JBQzNCLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUc7YUFDeEIsQ0FBQyxDQUFDO1lBQ0gsSUFBSTtnQkFDQSxPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNoRDtZQUFDLE9BQU8sS0FBSyxFQUFFO2dCQUNaLE9BQU8sSUFBSSxDQUFDO2FBQ2Y7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7O2dCQXpDSixVQUFVOztJQTJDWCx3QkFBQztDQUFBLEFBM0NELElBMkNDO1NBMUNZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIENyeXB0b0pTIGZyb20gJ2NyeXB0by1qcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBFbmNyeXB0aW9uU2VydmljZSB7XG5cbiAgICBwcml2YXRlIGl2U2l6ZTogbnVtYmVyID0gMTI4O1xuXG4gICAgcHVibGljIGdldEhtYWNTaGEyNTYoc2VjcmV0OiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgaGV4PzogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGhhc2ggPSBDcnlwdG9KUy5IbWFjU0hBMjU2KG1lc3NhZ2UsIHNlY3JldCk7XG4gICAgICAgIGlmIChoZXgpXG4gICAgICAgICAgICByZXR1cm4gQ3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkoaGFzaCkudG9VcHBlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIENyeXB0b0pTLmVuYy5CYXNlNjQuc3RyaW5naWZ5KGhhc2gpO1xuICAgIH1cblxuICAgIHB1YmxpYyBlbmNyeXB0QUVTKHNlY3JldEtleTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBpdiA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkucmFuZG9tKHRoaXMuaXZTaXplIC8gOCk7XG4gICAgICAgIGNvbnN0IGtleSA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKHNlY3JldEtleSk7XG4gICAgICAgIGNvbnN0IGVuY3J5cHRlZCA9IENyeXB0b0pTLkFFUy5lbmNyeXB0KG1lc3NhZ2UsIGtleSwge1xuICAgICAgICAgICAgaXY6IGl2LFxuICAgICAgICAgICAgcGFkZGluZzogQ3J5cHRvSlMucGFkLlBrY3M3LFxuICAgICAgICAgICAgbW9kZTogQ3J5cHRvSlMubW9kZS5DQkMsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBlbmNyeXB0TWVzc2FnZSA9IGl2LnRvU3RyaW5nKCkgKyBlbmNyeXB0ZWQudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIGVuY3J5cHRNZXNzYWdlO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZWNyeXB0QUVTKHNlY3JldEtleTogc3RyaW5nLCBlbmNyeXB0TWVzc2FnZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKGVuY3J5cHRNZXNzYWdlKSB7XG4gICAgICAgICAgICBjb25zdCBpdiA9IENyeXB0b0pTLmVuYy5IZXgucGFyc2UoZW5jcnlwdE1lc3NhZ2Uuc3Vic3RyKDAsIDMyKSk7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShzZWNyZXRLZXkpO1xuICAgICAgICAgICAgY29uc3QgZW5jcnlwdGVkID0gZW5jcnlwdE1lc3NhZ2Uuc3Vic3RyaW5nKDMyKTtcbiAgICAgICAgICAgIGNvbnN0IGRlY3J5cHRlZCA9IENyeXB0b0pTLkFFUy5kZWNyeXB0KGVuY3J5cHRlZCwga2V5LCB7XG4gICAgICAgICAgICAgIGl2OiBpdixcbiAgICAgICAgICAgICAgcGFkZGluZzogQ3J5cHRvSlMucGFkLlBrY3M3LFxuICAgICAgICAgICAgICBtb2RlOiBDcnlwdG9KUy5tb2RlLkNCQyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVjcnlwdGVkLnRvU3RyaW5nKENyeXB0b0pTLmVuYy5VdGY4KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG59XG4iXX0=