import { __awaiter } from "tslib";
import { Subject } from 'rxjs';
import * as idb from 'idb';
import { EncryptionService, OAUTH_INFO, } from '@dongkap/do-core';
export class IndexedDBService {
    constructor(injector, dbname, version, storeName) {
        this.storeName = storeName;
        this.openSessionIDB(dbname, version);
        this.enc = injector.get(EncryptionService);
        this.oauthResource = injector.get(OAUTH_INFO);
    }
    openSessionIDB(dbname, version) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.$dbPromise = idb.openDB(dbname, version);
        });
    }
    getAllOf() {
        const result$ = new Subject();
        this.getAllVal(this.storeName).then((value) => {
            result$.next(value);
        });
        return result$.asObservable();
    }
    getOf(key) {
        const result$ = new Subject();
        this.getKeyVal(key, this.storeName).then((value) => {
            result$.next(value);
        });
        return result$.asObservable();
    }
    putOf(key, val) {
        const result$ = new Subject();
        this.putKeyVal(key, val, this.storeName).then((value) => {
            result$.next(value);
        });
        return result$.asObservable();
    }
    removeOf(key) {
        const result$ = new Subject();
        this.removeKeyVal(key, this.storeName).then((value) => {
            result$.next(value);
        });
        return result$.asObservable();
    }
    getAll() {
        return this.getAllVal(this.storeName);
    }
    get(key) {
        return this.getKeyVal(this.storeName, key);
    }
    put(key, val) {
        return this.putKeyVal(this.storeName, key, val);
    }
    remove(key) {
        return this.removeKeyVal(this.storeName, key);
    }
    clearAll() {
        return this.clearAllKeyVal(this.storeName);
    }
    keys() {
        return this.keysKeyVal(this.storeName);
    }
    getAllVal(storeName) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.$dbPromise).getAll(storeName);
        });
    }
    getKeyVal(storeName, key) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.$dbPromise).get(storeName, key);
        });
    }
    putKeyVal(storeName, key, val) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.$dbPromise).put(storeName, val, key);
        });
    }
    removeKeyVal(storeName, key) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.$dbPromise).delete(storeName, key);
        });
    }
    clearAllKeyVal(storeName) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.$dbPromise).clear(storeName);
        });
    }
    keysKeyVal(storeName) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.$dbPromise).getAllKeys(storeName);
        });
    }
    addArticle(storeName, value) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.$dbPromise).add(storeName, value);
        });
    }
    addAllArticle(storeName, values) {
        return __awaiter(this, void 0, void 0, function* () {
            const tx = (yield this.$dbPromise).transaction(storeName, 'readwrite');
            values.forEach((value) => {
                tx.store.add(value);
            });
            return yield tx.done;
        });
    }
}
//# sourceMappingURL=data:application/json;base64,