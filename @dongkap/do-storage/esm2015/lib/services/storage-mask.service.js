import { Inject, Injectable } from '@angular/core';
import { EncryptionService, OAUTH_INFO, } from '@dongkap/do-core';
import * as i0 from "@angular/core";
import * as i1 from "@dongkap/do-core";
export class StorageMaskService {
    constructor(enc, oauthResource) {
        this.enc = enc;
        this.oauthResource = oauthResource;
    }
    getSessionStorageEnc(key) {
        const keyEncrypted = this.enc.getHmacSha256(this.oauthResource['private_key'], key, true);
        if (sessionStorage.getItem(keyEncrypted))
            return this.enc.decryptAES(this.oauthResource['aes_key'], sessionStorage.getItem(keyEncrypted));
        else
            return null;
    }
    setSessionStorageEnc(key, value) {
        const keyEncrypted = this.enc.getHmacSha256(this.oauthResource['private_key'], key, true);
        const valueEncrypted = this.enc.encryptAES(this.oauthResource['aes_key'], value);
        sessionStorage.setItem(keyEncrypted, valueEncrypted);
    }
    removeSessionStorageEnc(key) {
        const keyEncrypted = this.enc.getHmacSha256(this.oauthResource['private_key'], key, true);
        sessionStorage.removeItem(keyEncrypted);
    }
    getLocalStorageEnc(key) {
        const keyEncrypted = this.enc.getHmacSha256(this.oauthResource['private_key'], key, true);
        if (localStorage.getItem(keyEncrypted))
            return this.enc.decryptAES(this.oauthResource['aes_key'], localStorage.getItem(keyEncrypted));
        else
            return null;
    }
    setLocalStorageEnc(key, value) {
        const keyEncrypted = this.enc.getHmacSha256(this.oauthResource['private_key'], key, true);
        const valueEncrypted = this.enc.encryptAES(this.oauthResource['aes_key'], value);
        localStorage.setItem(keyEncrypted, valueEncrypted);
    }
    removeLocalStorageEnc(key) {
        const keyEncrypted = this.enc.getHmacSha256(this.oauthResource['private_key'], key, true);
        localStorage.removeItem(keyEncrypted);
    }
    getSessionStorage(key) {
        return (key) ? sessionStorage.getItem(key) : null;
    }
    setSessionStorage(key, value) {
        sessionStorage.setItem(key, value);
    }
    removeSessionStorage(key) {
        sessionStorage.removeItem(key);
    }
    getLocalStorage(key) {
        return (key) ? localStorage.getItem(key) : null;
    }
    setLocalStorage(key, value) {
        localStorage.setItem(key, value);
    }
    removeLocalStorage(key) {
        localStorage.removeItem(key);
    }
    clearSessionStorage() {
        sessionStorage.clear();
    }
    clearLocalStorage() {
        localStorage.clear();
    }
    clearAll() {
        sessionStorage.clear();
        localStorage.clear();
    }
}
StorageMaskService.ctorParameters = () => [
    { type: EncryptionService },
    { type: undefined, decorators: [{ type: Inject, args: [OAUTH_INFO,] }] }
];
StorageMaskService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StorageMaskService_Factory() { return new StorageMaskService(i0.ɵɵinject(i1.EncryptionService), i0.ɵɵinject(i1.OAUTH_INFO)); }, token: StorageMaskService, providedIn: "root" });
StorageMaskService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
StorageMaskService.ctorParameters = () => [
    { type: EncryptionService },
    { type: undefined, decorators: [{ type: Inject, args: [OAUTH_INFO,] }] }
];
//# sourceMappingURL=data:application/json;base64,